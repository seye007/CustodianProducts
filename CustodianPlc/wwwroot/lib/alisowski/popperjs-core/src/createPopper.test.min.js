/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/@alisowski/popperjs-core@2.4.3/src/createPopper.test.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{createPopper}from"./createPopper";const reference=document.createElement("div"),getPopper=()=>document.createElement("div"),testModifier={name:"test",phase:"main",enabled:!0};it("returns expected instance object",(()=>{expect(createPopper(reference,getPopper())).toMatchSnapshot()})),it("runs modifier effects on create",(()=>{const e=jest.fn();createPopper(reference,getPopper(),{modifiers:[{...testModifier,effect:e}]}),expect(e).toHaveBeenCalledTimes(1)})),it("does not run modifier effect cleanup functions on create",(()=>{const e=jest.fn();createPopper(reference,getPopper(),{modifiers:[{...testModifier,effect:()=>e}]}),expect(e).not.toHaveBeenCalled()})),it('errors if placement: "auto" and "flip" modifier is not present/enabled',(()=>{const e=jest.spyOn(console,"error");createPopper(reference,getPopper(),{placement:"auto",modifiers:[{name:"flip",enabled:!1}]}),expect(e).toHaveBeenCalledWith(['Popper: "auto" placements require the "flip" modifier be',"present and enabled to work."].join(" "))})),describe("margin warning",(()=>{it("warns for margin: value",(()=>{const e=jest.spyOn(console,"warn"),t=getPopper();t.style.margin="5px",createPopper(reference,t),expect(e).toHaveBeenCalledWith(['Popper: CSS "margin" styles cannot be used to apply padding',"between the popper and its reference element or boundary.","To replicate margin, use the `offset` modifier, as well as","the `padding` option in the `preventOverflow` and `flip`","modifiers."].join(" "))})),it("warns for two sides",(()=>{const e=jest.spyOn(console,"warn"),t=getPopper();t.style.margin="0 0.5em",createPopper(reference,t),expect(e).toHaveBeenCalledWith(['Popper: CSS "margin" styles cannot be used to apply padding',"between the popper and its reference element or boundary.","To replicate margin, use the `offset` modifier, as well as","the `padding` option in the `preventOverflow` and `flip`","modifiers."].join(" "))})),it("does not warn with no margin",(()=>{const e=jest.spyOn(console,"warn"),t=getPopper();t.style.margin="0px",createPopper(reference,t),expect(e).not.toHaveBeenCalled()}))})),it("does not error for missing phase for disabled modifiers",(()=>{const e=jest.spyOn(console,"error");createPopper(reference,getPopper(),{modifiers:[{name:"flip",enabled:!0,phase:"main",fn:()=>{}},{name:"flip",enabled:!1}]}),expect(e).not.toHaveBeenCalled()})),it("errors for custom modifier missing phase property",(()=>{const e=jest.spyOn(console,"error");createPopper(reference,getPopper(),{modifiers:[{name:"custom",enabled:!1}]}),expect(e).toHaveBeenCalled()})),describe(".setOptions() method",(()=>{it("correctly updates `placement`",(()=>{const e=createPopper(reference,getPopper(),{placement:"right"});e.setOptions({placement:"left"}),expect(e.state.options.placement).toBe("left")})),it("correctly updates `modifiers`",(()=>{const e=createPopper(reference,getPopper(),{modifiers:[]});e.setOptions({modifiers:[testModifier]}),expect(e.state.orderedModifiers.includes(testModifier)).toBe(!0)})),it("works with a partial",(()=>{const e=createPopper(reference,getPopper(),{modifiers:[testModifier]});e.setOptions({placement:"right"}),expect(e.state.orderedModifiers).toEqual([testModifier])}))})),describe(".destroy() method",(()=>{it("runs effect cleanup functions",(()=>{const e=jest.fn();createPopper(reference,getPopper(),{placement:"right",modifiers:[{...testModifier,effect:()=>e}]}).destroy(),expect(e).toHaveBeenCalledTimes(1)})),it("forceUpdate() is not ran when destroy is called sync",(e=>{const t=jest.fn();createPopper(reference,getPopper(),{modifiers:[{...testModifier,fn:t}]}).destroy(),setTimeout((()=>{expect(t).not.toHaveBeenCalled(),e()}))}))}));
//# sourceMappingURL=/sm/485a2680bca1090ffde5d92aee4418e22c03cbe6d576558f83e1e1bcf364bd39.map